# FILE: PyAdverseSearch/test/test_minimax.py

from .state_tictactoe import generate_tictactoe_game
from PyAdverseSearch.classes.algorithm import choose_best_move

def test_minimax_via_algorithm_selector():
    print("\nðŸ”µ TESTING MINIMAX VIA ALGORITHM SELECTOR ðŸ”µ")
    game = generate_tictactoe_game()
    state = game.state
    print("Plateau initial :")
    state.display()

    move_count = 10  # Nombre de coups Ã  jouer
    for i in range(move_count):
        print(f"\n--- Coup {i+1} ---")
        # On utilise l'algorithme pour obtenir le meilleur Ã©tat Ã  partir de l'Ã©tat courant.
        best_state = choose_best_move('minimax', game, state, max_depth=4)
        if best_state is None:
            print("Aucun coup trouvÃ© (Ã©tat terminal ou erreur).")
            break

        # Mettre Ã  jour l'Ã©tat courant
        state = best_state
        state.display()

        # Si l'Ã©tat est terminal, on arrÃªte la sÃ©quence
        if state._is_terminal():
            print("Ã‰tat terminal atteint.")
            break

if __name__ == "__main__":
    test_minimax_via_algorithm_selector()
